// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}
generator client {
  provider = "prisma-client-js"
}

model Store {
  id          String    @id @default(uuid())
  name        String
  userId      String

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  sizes       Size[] @relation("StoreToSize")
  color       Color[] @relation("StoreToColor")
  Category    Category[] @relation("StoreToCategory")
  billboards  Billboard[] @relation("StoreToBillboard")
  Order Order[] @relation("StoreToOrder")
  Product Product[] @relation("StoreToProducts")

}

model Billboard {
  id          String @id @default(uuid())
  storeId     String
  label       String
  imageUrl    String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  categories  Category[]

  @@index([storeId])
}

model Category {
  id          String   @id @default(uuid())
  storeId     String
  billboardId String
  name        String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Product     Product[] @relation("CategoryToProducts")
  billboard   Billboard @relation(fields: [billboardId],references: [id])
  store       Store @relation("StoreToCategory", fields: [storeId], references: [id])

  @@index([storeId])
  @@index([billboardId])

}

model Size {
  id          String   @id @default(uuid())
  storeId     String
  name        String
  value       String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  store       Store  @relation("StoreToSize",fields: [storeId], references: [id])  
  Product     Product[]

  @@index([storeId])
}

model Color {
  id          String   @id @default(uuid())
  storeId     String
  name        String
  value       String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
   
  Product     Product[]
  store       Store  @relation("StoreToColor",fields: [storeId], references: [id])

  @@index([storeId])
}

model Product {
  id          String @id @default(uuid())
  storeId     String
  categoryId  String
  name        String
  price       Decimal
  isFeatured  Boolean @default(false)
  isArchived  Boolean @default(false)
  sizeId      String
  colorId     String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category    Category @relation("CategoryToProducts",fields: [categoryId], references: [id])
  size        Size @relation(fields: [sizeId], references: [id])
  color       Color @relation(fields: [colorId], references: [id]) 
  image       Image[]
  OrderItem OrderItem[]
  store       Store @relation("StoreToProducts", fields: [storeId], references: [id])

  @@index([categoryId])
  @@index([storeId])
  @@index([sizeId])
  @@index([colorId])

}

model Image {
  id          String @id @default(uuid())
  productId   String
  url         String

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt 

  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id         String      @id @default(uuid())
  storeId    String
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] @relation("OrderToOrderItem")

  @@index([storeId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  price     Float

  product   Product @relation(fields: [productId], references: [id])
  order     Order   @relation("OrderToOrderItem", fields: [orderId], references: [id])

  @@index([orderId])
  @@index([productId])
}
